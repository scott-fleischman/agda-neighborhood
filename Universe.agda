module Universe where

data ­ЮЪў : Set where
record ­ЮЪЎ : Set where
  constructor <>

record ╬Б (A : Set) (B : A Рєњ Set) : Set where
  constructor _,_
  field
    fst : A
    snd : B fst

infixr 5 _├Ќ_ _,_ _`├Ќ_ _╦Ў├Ќ_
infixr 4 _+_ _`+_ _╦Ў+_

_├Ќ_ : (A B : Set) Рєњ Set
A ├Ќ B = ╬Б A (╬╗ _ Рєњ B)

data _+_ (A B : Set) : Set where
  inl : A Рєњ A + B
  inr : B Рєњ A + B

data JJ : Set where
  `R `P `1 : JJ
  _`+_ _`├Ќ_ : JJ Рєњ JJ Рєњ JJ

РЪд_РЪДр┤Хр┤Х : JJ Рєњ Set Рєњ Set Рєњ Set
РЪд `R РЪДр┤Хр┤Х R P = R
РЪд `P РЪДр┤Хр┤Х R P = P
РЪд `1 РЪДр┤Хр┤Х R P = ­ЮЪЎ
РЪд S `+ T РЪДр┤Хр┤Х R P = РЪд S РЪДр┤Хр┤Х R P + РЪд T РЪДр┤Хр┤Х R P
РЪд S `├Ќ T РЪДр┤Хр┤Х R P = РЪд S РЪДр┤Хр┤Х R P ├Ќ РЪд T РЪДр┤Хр┤Х R P

data ╬╝р┤Хр┤Х (F : JJ) (P : Set) : Set where
  РЪе_РЪЕ : РЪд F РЪДр┤Хр┤Х (╬╝р┤Хр┤Х F P) P Рєњ ╬╝р┤Хр┤Х F P

record Applicative (H : Set Рєњ Set) : SetРѓЂ where
  field
    pure : Рѕђ {X} Рєњ X Рєњ H X
    ap : Рѕђ {S T} Рєњ H (S Рєњ T) Рєњ H S Рєњ H T
open Applicative

traverse
  : Рѕђ {H F A B}
  Рєњ Applicative H
  Рєњ (A Рєњ H B)
  Рєњ ╬╝р┤Хр┤Х F A
  Рєњ H (╬╝р┤Хр┤Х F B)
traverse {H} {F} {A} {B} AH h t = go `R t
  where
  pu = pure AH
  _РіЏ_ = ap AH
  infixl 5 _РіЏ_

  go : Рѕђ G
    Рєњ РЪд G РЪДр┤Хр┤Х (╬╝р┤Хр┤Х F A) A
    Рєњ H (РЪд G РЪДр┤Хр┤Х (╬╝р┤Хр┤Х F B) B)
  go `R РЪе t РЪЕ = pu РЪе_РЪЕ РіЏ go F t
  go `P a = h a
  go `1 <> = pu <>
  go (S `+ T) (inl s) = pu inl РіЏ go S s
  go (S `+ T) (inr t) = pu inr РіЏ go T t
  go (S `├Ќ T) (s , t) = pu _,_ РіЏ go S s РіЏ go T t

id : {X : Set} Рєњ X Рєњ X
id x = x

idApp : Applicative (╬╗ X Рєњ X)
idApp = record { pure = id; ap = id }

map : Рѕђ {F A B}
  Рєњ (A Рєњ B)
  Рєњ ╬╝р┤Хр┤Х F A
  Рєњ ╬╝р┤Хр┤Х F B
map = traverse idApp

record Monoid (X : Set) : Set where
  field
    neutral : X
    combine : X Рєњ X Рєњ X
  monApp : Applicative (╬╗ _ Рєњ X)
  monApp = record { pure = ╬╗ _ Рєњ neutral ; ap = combine }
  crush : Рѕђ {P F} Рєњ (P Рєњ X) Рєњ ╬╝р┤Хр┤Х F P Рєњ X
  crush = traverse {B = ­ЮЪў} monApp
open Monoid

_Рѕў_ : {A B C : Set} Рєњ (B Рєњ C) Рєњ (A Рєњ B) Рєњ A Рєњ C
(f Рѕў g) x = f (g x)

compMon : Рѕђ {X} Рєњ Monoid (X Рєњ X)
compMon = record { neutral = id ; combine = ╬╗ f g Рєњ f Рѕў g }

foldr : Рѕђ {F A B}
  Рєњ (A Рєњ B Рєњ B)
  Рєњ B
  Рєњ ╬╝р┤Хр┤Х F A
  Рєњ B
foldr f b t = crush compMon f t b


-- 10. The Simple Orderable Subuniverse of JJ

data SO : Set where
  `R `1 : SO
  _`+_ _`^_ : SO Рєњ SO Рєњ SO
infixr 5 _`^_

РЪд_РЪД╦брхњ : SO Рєњ JJ
РЪд `R РЪД╦брхњ = `R
РЪд `1 РЪД╦брхњ = `1
РЪд S `+ T РЪД╦брхњ = РЪд S РЪД╦брхњ `+ РЪд T РЪД╦брхњ
РЪд S `^ T РЪД╦брхњ = РЪд S РЪД╦брхњ `├Ќ `P `├Ќ РЪд T РЪД╦брхњ

╬╝╦брхњ : SO Рєњ Set Рєњ Set
╬╝╦брхњ F P = ╬╝р┤Хр┤Х РЪд F РЪД╦брхњ P

`List╦брхњ : SO
`List╦брхњ = `1 `+ (`1 `^ `R)
`Tree╦брхњ : SO
`Tree╦брхњ = `1 `+ (`R `^ `R)
`Interval╦брхњ : SO
`Interval╦брхњ = `1 `^ `1

tree╦брхњ
  : Рѕђ {P F}
  Рєњ ╬╝╦брхњ F P
  Рєњ ╬╝╦брхњ `Tree╦брхњ P
tree╦брхњ {P} {F} РЪе f РЪЕ = go F f
  where
  go : Рѕђ G
    Рєњ РЪд РЪд G РЪД╦брхњ РЪДр┤Хр┤Х (╬╝╦брхњ F P) P
    Рєњ ╬╝╦брхњ `Tree╦брхњ P
  go `R x = tree╦брхњ x
  go `1 <> = РЪе inl <> РЪЕ
  go (S `+ T) (inl s) = go S s
  go (S `+ T) (inr t) = go T t
  go (S `^ T) (s , p , t) = РЪе inr (go S s , p , go T t) РЪЕ

data <РіЦ_Ріц>рхѕ (P : Set) : Set where
  Ріц : <РіЦ P Ріц>рхѕ
  # : P Рєњ <РіЦ P Ріц>рхѕ
  РіЦ : <РіЦ P Ріц>рхѕ

Rel : Set Рєњ SetРѓЂ
Rel P = P ├Ќ P Рєњ Set

<РіЦ_Ріц>рХа : Рѕђ {P} Рєњ Rel P Рєњ Rel <РіЦ P Ріц>рхѕ
<РіЦ L Ріц>рХа (_ , Ріц) = ­ЮЪЎ
<РіЦ L Ріц>рХа (# x , # y) = L (x , y)
<РіЦ L Ріц>рХа (РіЦ , _) = ­ЮЪЎ
<РіЦ L Ріц>рХа (_ , _) = ­ЮЪў

record Рїѕ_РїЅрхќ (P : Set) : Set where
  constructor !
  field {{proof}} : P

_РЄњ_ : Set Рєњ Set Рєњ Set
P РЄњ T = {{p : P}} Рєњ T
infixr 3 _РЄњ_

magic : {X : Set} -> ­ЮЪў РЄњ X
magic {{()}}

Рїѕ_РїЅ╩│ : Рѕђ {P} Рєњ Rel P Рєњ Rel <РіЦ P Ріц>рхѕ
Рїѕ L РїЅ╩│ xy = Рїѕ <РіЦ L Ріц>рХа xy РїЅрхќ

╦Ў0 : {I : Set} Рєњ I Рєњ Set
╦Ў0 i = ­ЮЪў
╦Ў1 : {I : Set} Рєњ I Рєњ Set
╦Ў1 i = ­ЮЪЎ

_╦Ў+_ : {I : Set} Рєњ (f g : I Рєњ Set) Рєњ I Рєњ Set
(S ╦Ў+ T) i = S i + T i
_╦Ў├Ќ_ : {I : Set} Рєњ (f g : I Рєњ Set) Рєњ I Рєњ Set
(S ╦Ў├Ќ T) i = S i ├Ќ T i
_╦ЎРєњ_ : {I : Set} Рєњ (f g : I Рєњ Set) Рєњ I Рєњ Set
(S ╦ЎРєњ T) i = S i Рєњ T i
infixr 2 _╦ЎРєњ_

[_] : {I : Set} Рєњ (I Рєњ Set) Рєњ Set
[ F ] = Рѕђ {i} Рєњ F i

_╦Ў^_ : Рѕђ {P} Рєњ (S T : Rel <РіЦ P Ріц>рхѕ) Рєњ Rel <РіЦ P Ріц>рхѕ
_╦Ў^_ {P} S T (l , u) = ╬Б P ╬╗ p Рєњ S (l , # p) ├Ќ T (# p , u)

pattern _Рђў_Рђў_ s p t = p , s , t
infixr 5 _Рђў_Рђў_

РЪд_РЪДРЅц╦брхњ : SO Рєњ Рѕђ {P} Рєњ Rel <РіЦ P Ріц>рхѕ Рєњ Rel P Рєњ Rel <РіЦ P Ріц>рхѕ
РЪд `R РЪДРЅц╦брхњ R L = R
РЪд `1 РЪДРЅц╦брхњ R L = Рїѕ L РїЅ╩│
РЪд S `+ T РЪДРЅц╦брхњ R L = РЪд S РЪДРЅц╦брхњ R L ╦Ў+ РЪд T РЪДРЅц╦брхњ R L
РЪд S `^ T РЪДРЅц╦брхњ R L = РЪд S РЪДРЅц╦брхњ R L ╦Ў^ РЪд T РЪДРЅц╦брхњ R L

data ╬╝РЅц╦брхњ (F : SO) {P : Set} (L : Rel P) (lu : <РіЦ P Ріц>рхѕ ├Ќ <РіЦ P Ріц>рхѕ) : Set where
  РЪе_РЪЕ : РЪд F РЪДРЅц╦брхњ (╬╝РЅц╦брхњ F L) L lu Рєњ ╬╝РЅц╦брхњ F L lu

_╬ћ╦брхњ : Рѕђ {P} Рєњ Rel P Рєњ Rel <РіЦ P Ріц>рхѕ
L ╬ћ╦брхњ = ╬╝РЅц╦брхњ `Tree╦брхњ L
pattern leafРЅц╦брхњ = РЪе inl ! РЪЕ
pattern nodeРЅц╦брхњ lp p pu = РЪе inr (lp Рђў p Рђў pu) РЪЕ

_Рђб╦брхњ : Рѕђ {P} Рєњ Rel P Рєњ Rel <РіЦ P Ріц>рхѕ
L Рђб╦брхњ = ╬╝РЅц╦брхњ `Interval╦брхњ L

pattern _┬░╦брхњ p = РЪе (p , ! , !) РЪЕ

treeРЅц╦брхњ : Рѕђ {P F} {L : Rel P} Рєњ [ ╬╝РЅц╦брхњ F L ╦ЎРєњ L ╬ћ╦брхњ ]
treeРЅц╦брхњ {P} {F} {L} РЪе f РЪЕ = go F f where
  go : Рѕђ G Рєњ [ РЪд G РЪДРЅц╦брхњ (╬╝РЅц╦брхњ F L) L ╦ЎРєњ L ╬ћ╦брхњ ]
  go `R x = treeРЅц╦брхњ x
  go `1 ! = leafРЅц╦брхњ
  go (S `+ T) (inl s) = go S s
  go (S `+ T) (inr t) = go T t
  go (S `^ T) (s Рђў p Рђў t) = nodeРЅц╦брхњ (go S s) p (go T t)

OWOTO : Рѕђ {P} (L : Rel P) -> Rel P
OWOTO L (x , y) = Рїѕ L (x , y) РїЅрхќ + Рїѕ L (y , x) РїЅрхќ

module BSTGen {P : Set} (L : Rel P) (owoto : Рѕђ x y -> OWOTO L (x , y)) where

  insert : [ L Рђб╦брхњ ╦ЎРєњ L ╬ћ╦брхњ ╦ЎРєњ L ╬ћ╦брхњ ]
  insert (y ┬░╦брхњ) leafРЅц╦брхњ = nodeРЅц╦брхњ leafРЅц╦брхњ y leafРЅц╦брхњ
  insert (y ┬░╦брхњ) (nodeРЅц╦брхњ lt p rt) with owoto y p
  Рђд | inl ! = nodeРЅц╦брхњ (insert (y ┬░╦брхњ) lt) p rt
  Рђд | inr ! = nodeРЅц╦брхњ lt p (insert (y ┬░╦брхњ) rt)

  makeTree : Рѕђ {F} Рєњ ╬╝р┤Хр┤Х F P Рєњ (L ╬ћ╦брхњ) (РіЦ , Ріц)
  makeTree = foldr (╬╗ p Рєњ insert (p ┬░╦брхњ)) leafРЅц╦брхњ

_РЂ║╦брхњ : Рѕђ {P} Рєњ Rel P Рєњ Rel <РіЦ P Ріц>рхѕ
L РЂ║╦брхњ = ╬╝РЅц╦брхњ `List╦брхњ L

pattern [] = РЪе inl ! РЪЕ
pattern _Рѕи_ x xs = РЪе inr (x , ! , xs) РЪЕ
infixr 6 _Рѕи_

module Merger
  {P : Set}
  (L : Rel P)
  (owoto : Рѕђ x y -> OWOTO L (x , y))
  where
  merge : [ L РЂ║╦брхњ ╦ЎРєњ L РЂ║╦брхњ ╦ЎРєњ L РЂ║╦брхњ ]
  merge [] = id
  merge {l , u} (x Рѕи xs) = go where
    go : Рѕђ {l} {{_ : <РіЦ L Ріц>рХа (l , # x)}} Рєњ (L РЂ║╦брхњ ╦ЎРєњ L РЂ║╦брхњ) (l , u)
    go [] = x Рѕи xs
    go (y Рѕи ys) with owoto x y
    Рђд | inl ! = x Рѕи merge xs (y Рѕи ys)
    Рђд | inr ! = y Рѕи go ys

  olMon : Рѕђ {lu} Рєњ <РіЦ L Ріц>рХа lu РЄњ Monoid ((L РЂ║╦брхњ) lu)
  olMon = record { neutral = [] ; combine = merge }

  mergeр┤Хр┤Х : Рѕђ {F} Рєњ ╬╝р┤Хр┤Х F P Рєњ (L РЂ║╦брхњ) (РіЦ , Ріц)
  mergeр┤Хр┤Х = crush olMon (_Рѕи [])

  `qLTree : JJ
  `qLTree = (`1 `+ `P) `+ (`R `├Ќ `R)

  pattern none = РЪе inl (inl <>) РЪЕ
  pattern one p = РЪе inl (inr p) РЪЕ
  pattern fork l r = РЪе inr (l , r) РЪЕ

  twistIn : P Рєњ ╬╝р┤Хр┤Х `qLTree P Рєњ ╬╝р┤Хр┤Х `qLTree P
  twistIn p none = one p
  twistIn p (one q) = fork (one p) (one q)
  twistIn p (fork l r) = fork (twistIn p r) l

  mergeSort : Рѕђ {F} Рєњ ╬╝р┤Хр┤Х F P Рєњ (L РЂ║╦брхњ) (РіЦ , Ріц)
  mergeSort = mergeр┤Хр┤Х Рѕў foldr twistIn none

sandwich : Рѕђ {P} {L : Rel P} Рєњ [ (L РЂ║╦брхњ) ╦Ў^ (L РЂ║╦брхњ) ╦ЎРєњ (L РЂ║╦брхњ) ]
sandwich ([] Рђў p Рђў ys) = p Рѕи ys
sandwich (x Рѕи xs Рђў p Рђў ys) = x Рѕи sandwich (xs Рђў p Рђў ys)

flatten' : Рѕђ {P} {L : Rel P} Рєњ [ (L ╬ћ╦брхњ) ╦ЎРєњ (L РЂ║╦брхњ) ]
flatten' leafРЅц╦брхњ = []
flatten' (nodeРЅц╦брхњ l p r) = sandwich (flatten' l Рђў p Рђў flatten' r)

flattenРЅц╦брхњ : Рѕђ {P} {L : Rel P} {F} Рєњ [ ╬╝РЅц╦брхњ F L ╦ЎРєњ L РЂ║╦брхњ ]
flattenРЅц╦брхњ = flatten' Рѕў treeРЅц╦брхњ

infixr 8 _++_
RepL : Рѕђ {P} Рєњ Rel P Рєњ Rel <РіЦ P Ріц>рхѕ
RepL L (n , u) = Рѕђ {m} Рєњ <РіЦ L Ріц>рХа (m , n) РЄњ (L РЂ║╦брхњ) (m , u)
_++_ : Рѕђ {P} {L : Rel P} {l n u}
  Рєњ (L РЂ║╦брхњ) (l , n)
  Рєњ RepL L (n , u)
  Рєњ (L РЂ║╦брхњ) (l , u)
[] ++ ys = ys
(x Рѕи xs) ++ ys = x Рѕи xs ++ ys

flapp╦брхњ : Рѕђ {P} {L : Rel P} {F} {l n u}
  Рєњ ╬╝РЅц╦брхњ F L (l , n)
  Рєњ RepL L (n , u)
  Рєњ (L РЂ║╦брхњ) (l , u)
flapp╦брхњ {P} {L} {F} {u = u} t ys = go `R t ys
  where
  go : Рѕђ {l n} G
    Рєњ РЪд G РЪДРЅц╦брхњ (╬╝РЅц╦брхњ F L) L (l , n)
    Рєњ RepL L (n , u)
    Рєњ (L РЂ║╦брхњ) (l , u)
  go `R РЪе t РЪЕ ys = go F t ys
  go `1 ! ys = ys
  go (S `+ T) (inl s) ys = go S s ys
  go (S `+ T) (inr t) ys = go T t ys
  go (S `^ T) (s Рђў p Рђў t) ys = go S s (p Рѕи go T t ys)

flatten╦брхњ : Рѕђ {P} {L : Rel P} {F} Рєњ [ ╬╝РЅц╦брхњ F L ╦ЎРєњ (L РЂ║╦брхњ) ]
flatten╦брхњ t = flapp╦брхњ t []

data IO (I : Set) : Set where
  `R : I Рєњ IO I
  `0 `1 : IO I
  _`+_ _`^_ : (S T : IO I) Рєњ IO I

РЪд_РЪДРЅцр┤хр┤╝ : Рѕђ {I P}
  Рєњ IO I
  Рєњ (I Рєњ Rel <РіЦ P Ріц>рхѕ)
  Рєњ Rel P
  Рєњ Rel <РіЦ P Ріц>рхѕ
РЪд `R i РЪДРЅцр┤хр┤╝ R L = R i
РЪд `0 РЪДРЅцр┤хр┤╝ R L = ╬╗ _ Рєњ ­ЮЪў
РЪд `1 РЪДРЅцр┤хр┤╝ R L = Рїѕ L РїЅ╩│
РЪд S `+ T РЪДРЅцр┤хр┤╝ R L = РЪд S РЪДРЅцр┤хр┤╝ R L ╦Ў+ РЪд T РЪДРЅцр┤хр┤╝ R L
РЪд S `^ T РЪДРЅцр┤хр┤╝ R L = РЪд S РЪДРЅцр┤хр┤╝ R L ╦Ў^ РЪд T РЪДРЅцр┤хр┤╝ R L

data ╬╝РЅцр┤хр┤╝ {I P : Set} (F : I Рєњ IO I) (L : Rel P) (i : I) (lu : <РіЦ P Ріц>рхѕ ├Ќ <РіЦ P Ріц>рхѕ) : Set where
  РЪе_РЪЕ : РЪд F i РЪДРЅцр┤хр┤╝ (╬╝РЅцр┤хр┤╝ F L) L lu Рєњ ╬╝РЅцр┤хр┤╝ F L i lu

pattern leaf = РЪе inl ! РЪЕ
pattern node lp p pu = РЪе inr (lp Рђў p Рђў pu) РЪЕ

`List : ­ЮЪЎ Рєњ IO ­ЮЪЎ
`List _ = `1 `+ (`1 `^ `R <>)
`Tree : ­ЮЪЎ Рєњ IO ­ЮЪЎ
`Tree _ = `1 `+ (`R <> `^ `R <>)
`Interval : ­ЮЪЎ Рєњ IO ­ЮЪЎ
`Interval _ = `1 `^ `1

_╬ћ : Рѕђ {P} Рєњ Rel P Рєњ Rel <РіЦ P Ріц>рхѕ
L ╬ћ = ╬╝РЅцр┤хр┤╝ `Tree L <>

_Рђб : Рѕђ {P} Рєњ Rel P Рєњ Rel <РіЦ P Ріц>рхѕ
L Рђб = ╬╝РЅцр┤хр┤╝ `Interval L <>

_РЂ║ : Рѕђ {P} Рєњ Rel P Рєњ Rel <РіЦ P Ріц>рхѕ
L РЂ║ = ╬╝РЅцр┤хр┤╝ `List L <>

open import Agda.Builtin.Nat renaming (Nat to РёЋ) using (zero) using (suc)

RelРЅц : Rel РёЋ
RelРЅц (x , y) = x <= y where
  _<=_ : РёЋ -> РёЋ -> Set
  zero <= y = ­ЮЪЎ
  suc x <= zero = ­ЮЪў
  suc x <= suc y = x <= y

`Vec : РёЋ Рєњ IO РёЋ
`Vec zero = `1
`Vec (suc n) = `1 `^ `R n

test-vec0 : ╬╝РЅцр┤хр┤╝ `Vec RelРЅц 0 (РіЦ , Ріц)
test-vec0 = РЪе ! РЪЕ

test-vec1 : ╬╝РЅцр┤хр┤╝ `Vec RelРЅц 1 (РіЦ , Ріц)
test-vec1 = РЪе (99 , (! , РЪе ! РЪЕ)) РЪЕ

`Even : РёЋ Рєњ IO РёЋ
`Even zero = `1
`Even (suc zero) = `0
`Even (suc (suc n)) = `1 `^ `1 `^ `R n

test-even0 : ╬╝РЅцр┤хр┤╝ `Even RelРЅц 0 (РіЦ , Ріц)
test-even0 = РЪе ! РЪЕ

test-even2 : ╬╝РЅцр┤хр┤╝ `Even RelРЅц 2 (РіЦ , Ріц)
test-even2 = РЪе 99 , (! , (100 , (! , РЪе ! РЪЕ))) РЪЕ

tree : Рѕђ {I P F} {L : Rel P} {i : I}
  Рєњ [ ╬╝РЅцр┤хр┤╝ F L i ╦ЎРєњ L ╬ћ ]
tree {I} {P} {F} {L} {i} РЪе f РЪЕ = go (F i) f where
  go : Рѕђ G Рєњ [ РЪд G РЪДРЅцр┤хр┤╝ (╬╝РЅцр┤хр┤╝ F L) L ╦ЎРєњ L ╬ћ ]
  go (`R i) x = tree x
  go `1 ! = leaf
  go `0 ()
  go (S `+ T) (inl s) = go S s
  go (S `+ T) (inr t) = go T t
  go (S `^ T) (s Рђў p Рђў t) = node (go S s) p (go T t)

flatten : Рѕђ {I P F} {L : Rel P} {i : I}
  Рєњ [ ╬╝РЅцр┤хр┤╝ F L i ╦ЎРєњ L РЂ║ ]
flatten {I} {P} {F} {L} {i} {l , u} РЪе t РЪЕ = go (F i) t РЪе inl ! РЪЕ where
  go : Рѕђ G {l n}
    Рєњ РЪд G РЪДРЅцр┤хр┤╝ (╬╝РЅцр┤хр┤╝ F L) L (l , n)
    Рєњ (Рѕђ {m} Рєњ <РіЦ L Ріц>рХа (m , n) РЄњ (L РЂ║) (m , u))
    Рєњ (L РЂ║) (l , u)
  go (`R i) РЪе t РЪЕ ys = go (F i) t ys
  go `0 () ys
  go `1 ! ys = ys
  go (S `+ T) (inl s) ys = go S s ys
  go (S `+ T) (inr t) ys = go T t ys
  go (S `^ T) (s Рђў p Рђў t) ys = go S s РЪе (inr (p , ! , go T t ys)) РЪЕ

`Tree23 : РёЋ Рєњ IO РёЋ
`Tree23 zero = `1
`Tree23 (suc h) = `R h `^ (`R h `+ (`R h `^ `R h))

_┬▓┬│ : Рѕђ {P} (L : Rel P) Рєњ РёЋ Рєњ Rel <РіЦ P Ріц>рхѕ
L ┬▓┬│ = ╬╝РЅцр┤хр┤╝ `Tree23 L

pattern noРѓђ = РЪе ! РЪЕ
pattern noРѓѓ lt p rt = РЪе p , lt , inl rt РЪЕ
pattern noРѓЃ lt p mt q rt = РЪе p , lt , inr (q , mt , rt) РЪЕ

pattern le = inl !
pattern ge = inr !

module 23Tree
  {P : Set}
  (L : Rel P)
  (owoto : Рѕђ x y -> OWOTO L (x , y))
  where
  pattern _┬░ p = РЪе p , ! , ! РЪЕ

  ins23 : Рѕђ h {lu}
    Рєњ (L Рђб) lu
    Рєњ (L ┬▓┬│) h lu
    Рєњ (L ┬▓┬│) h lu
    + ╬Б P ╬╗ p
      Рєњ (L ┬▓┬│) h (╬Б.fst lu , # p)
      ├Ќ (L ┬▓┬│) h (# p , ╬Б.snd lu)
  ins23 zero (y ┬░) РЪе ! РЪЕ = inr (РЪе ! РЪЕ Рђў y Рђў РЪе ! РЪЕ)
  ins23 (suc h) (y ┬░) РЪе lt Рђў p Рђў rest РЪЕ with owoto y p
  ins23 (suc h) (y ┬░) РЪе lt Рђў p Рђў rest РЪЕ | le with ins23 h (y ┬░) lt
  ins23 (suc h) (y ┬░) РЪе lt Рђў p Рђў rest РЪЕ | le | inl lt' = inl РЪе lt' Рђў p Рђў rest РЪЕ
  ins23 (suc h) (y ┬░) (noРѓѓ lt p rt) | le | inr (llt Рђў r Рђў lrt) = inl (noРѓЃ llt r lrt p rt)
  ins23 (suc h) (y ┬░) (noРѓЃ lt p mt q rt) | le | inr (llt Рђў r Рђў lrt) = inr (noРѓѓ llt r lrt Рђў p Рђў noРѓѓ mt q rt)
  ins23 (suc h) (y ┬░) (noРѓѓ lt p rt) | ge with ins23 h (y ┬░) rt
  ins23 (suc h) (y ┬░) (noРѓѓ lt p rt) | ge | rt' = inl РЪе (lt Рђў p Рђў rt' ) РЪЕ
  ins23 (suc h) (y ┬░) (noРѓЃ lt p mt q rt) | ge with owoto y q
  ins23 (suc h) (y ┬░) (noРѓЃ lt p mt q rt) | ge | le with ins23 h (y ┬░) mt
  ins23 (suc h) (y ┬░) (noРѓЃ lt p mt q rt) | ge | le | inl mt' = inl (noРѓЃ lt p mt' q rt)
  ins23 (suc h) (y ┬░) (noРѓЃ lt p mt q rt) | ge | le | inr (mlt Рђў r Рђў mrt) = inr (noРѓѓ lt p mlt Рђў r Рђў noРѓѓ mrt q rt)
  ins23 (suc h) (y ┬░) (noРѓЃ lt p mt q rt) | ge | ge with ins23 h (y ┬░) rt
  ins23 (suc h) (y ┬░) (noРѓЃ lt p mt q rt) | ge | ge | inl rt' = inl (noРѓЃ lt p mt q rt')
  ins23 (suc h) (y ┬░) (noРѓЃ lt p mt q rt) | ge | ge | inr (rlt Рђў r Рђў rrt) = inr (noРѓѓ lt p mt Рђў q Рђў noРѓѓ rlt r rrt)
